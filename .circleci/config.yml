version: 2.1

orbs:
  node: circleci/node@5.1.0
  aws-cli: circleci/aws-cli@3.1.5



commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    # parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Empty S3 bucket:
            aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
  
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    # parameters:
    #   # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$( curl https://kvdb.io/7AiAwC67kGTnWWyt6acGGm/migration_${CIRCLE_WORKFLOW_ID:0:7} )
            if [[ "$SUCCESS"==1 ]]
            then
              cd backend
              npm install
              npm run migration:revert
            fi

  install-awscli:
    description: Install aws cli
    steps:
      - run:
          name: Install aws cli
          command: |
            # Install AWS cli
            current_dir=$( pwd )
            cd /tmp/
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install-ansible:
    description: Install ansible
    steps:
      - run:
          name: Install ansible
          command: |
            sudo apt update
            sudo apt install -y python3-venv python3-pip
            python3 -m pip install --upgrade pip
            python3 -m pip install --user ansible

jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
              cd frontend
              npm install
              npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
              cd backend
              npm install
              npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test frontend
          command: |
              cd frontend
              npm install
              npm run test

  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test backend
          command: |
              cd backend
              npm install
              npm run test

  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Analyse frontend
          command: |
              cd frontend
              npm install
              npm audit fix --audit-level=critical --force
              npm audit fix --force
              npm audit --audit-level=critical
  
  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Analyse backend
          command: |
              cd backend
              npm install
              npm audit fix --audit-level=critical --force
              npm audit fix --force
              npm audit --audit-level=critical
  deploy-infrastructure:
    docker:
      - image: cimg/aws:2023.04
    steps:
      - checkout
      - run:
          name: "Deploy backend infrastructure"
          command: |
              aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: "Deploy frontend infrastructure"
          command: |
              aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: "Get backend public IP"
          command: |
              aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters Name=tag:Name,Values=backend-"${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> ~/backend_ip.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - backend_ip.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: cimg/python:3.11.3
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["18:54:d9:5b:c3:71:bd:5c:70:0b:bb:fe:a3:7e:9d:e0"] 
      - attach_workspace:
          at: ~/
      - run:
          name: Install ansible
          command: |
            python3 -m pip install --user ansible
      - run:
          name: Run Playbook and Configure server
          command: |
            cat ~/backend_ip.txt 
            cd .circleci/ansible/ 
            cat ~/backend_ip.txt >> inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - persist_to_workspace:
          root: .circleci/ansible/ 
          paths:
            - inventory.txt

  run-migrations:
    docker: 
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]      
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully." migrations_dump.txt
            then
              curl https://kvdb.io/7AiAwC67kGTnWWyt6acGGm/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
     # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]  
      - attach_workspace:
          at: ~/
      - install-awscli
      - run:
          name: Get API URL
          command: |
            export BACKEND_IP=$( cat ~/backend_ip.txt )
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migrations

  deploy-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["18:54:d9:5b:c3:71:bd:5c:70:0b:bb:fe:a3:7e:9d:e0"] 
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: .circleci/ansible/
      - install-awscli
      - install-ansible
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ../
            
            # Zip the directory
            artifact_name=artifact-backend-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz
            tar -C backend -czvf $artifact_name .
            
            cp "$artifact_name" .circleci/ansible/roles/deploy/files/artifact.tar.gz

            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
      - revert-migrations

  smoke-test:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - attach_workspace:
          at: ~/
      - install-awscli
      - run: 
          name: Wait for api to up and running
          command: |
            sleep 10
      - run:
          name: Test backend
          command: |
            export BACKEND_IP=$( cat ~/backend_ip.txt )
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Test frontend
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - destroy-environment
      - revert-migrations

  cloudfront-update:
    docker:
      - image: cimg/aws:2023.04
    steps:
      - checkout
      - run:
          name: Backup old workflow id for clean up
          command: |
            export OldWorkflowID=$(aws cloudformation \
                      list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                      --no-paginate --output text)
            echo $OldWorkflowID > ~/old_workflow_id.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - old_workflow_id.txt
      - run:
          name: "Promote new version"
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople

  cleanup:
    docker:
      - image: cimg/aws:2023.04
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: "Clean up unused AWS resources"
          command: |
            # Fetch the Old workflow ID
            export OldWorkflowID="$( cat ~/old_workflow_id.txt )"
            echo OldWorkflowID: "${OldWorkflowID}"

            if [[ "${OldWorkflowID}" != "" ]]
            then
              exit 0
            fi

            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            
            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                      --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}" 

            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" =~ "${OldWorkflowID}" ]]
            then
              echo "Clean up resource created by ${OldWorkflowID}"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            else
              echo "Hooray"
            fi

workflows:
  udapeople-pipeline:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-frontend, deploy-backend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]